<template>
  <div class="page" data-name="album-viewer">
    <div
      style="
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 0.75rem 1rem 0 1rem;
      "
    >
      <a href="/gallery/albums/" class="back-arrow">
        <i class="icon f7-icons">arrow_left</i>
      </a>
      <button id="albumOptionsBtn" class="toolbar-button">
        <i class="f7-icons">ellipsis_vertical</i>
      </button>
    </div>

    <div class="page-content">
      <div id="albumDetails" style="padding: 1rem; text-align: center"></div>
      <div id="album-gallery"></div>
    </div>
  </div>
</template>

<script>
  import store from "../js/store.js";

  export default (props, { $onMounted, $f7, $f7route }) => {
    $onMounted(async () => {
      const token = store.state.token;
      const server = store.state.server;
      const albumId = $f7route.params.albumId;
      const details = document.getElementById("albumDetails");

      if (!token) {
        $f7.views.main.router.navigate("/login");
        return;
      }

      async function loadAlbum() {
        try {
          const res = await fetch(`${server}/album/${albumId}`, {
            headers: { Authorization: `Bearer ${token}` },
          });
          if (!res.ok) throw new Error("Failed to fetch album details");
          const album = await res.json();

          let html = `<h1 style="margin-bottom:0.5rem;">${album.name}</h1>`;
          if (album.cover_filename) {
            const coverUrl = `${server}/uploads/${album.cover_filename}`;
            html += `<img src="${coverUrl}" style="max-width:90%; border-radius:12px; margin-top:0.5rem;">`;
          }
          details.innerHTML = html;
        } catch (err) {
          console.error("[AlbumViewer] Album load error:", err);
          details.innerHTML = `<p style="color:red;">Failed to load album info.</p>`;
        }
      }

      await loadAlbum();

      document.getElementById("albumOptionsBtn").onclick = () => {
        const actions = $f7.actions.create({
          buttons: [
            [
              {
                text: "Change Name",
                onClick: async () => {
                  $f7.dialog.prompt(
                    "New album name:",
                    "Change Name",
                    async (name) => {
                      if (!name) return;
                      await fetch(`${server}/album/${albumId}/update`, {
                        method: "POST",
                        headers: { Authorization: `Bearer ${token}` },
                        body: new URLSearchParams({ new_name: name }),
                      });
                      $f7.views.main.router.refreshPage();
                    }
                  );
                },
              },
              {
                text: "Change Cover",
                onClick: async () => {
                  $f7.dialog.preloader("Loading media...");
                  try {
                    const container = document.getElementById("album-gallery");
                    const imgs = Array.from(
                      container.querySelectorAll(".media-tile img")
                    );
                    if (!imgs.length) throw new Error("No media available");

                    let html = `<div class="sheet-modal-cover-picker"><div class="dialog-media-grid">`;
                    for (const img of imgs) {
                      const src = img.dataset.src || img.src;
                      const full = img.closest("a").href;
                      html += `<div class="media-option"><img src="${src}" data-full="${full}"/></div>`;
                    }
                    html += `</div></div>`;

                    $f7.dialog.close();

                    const sheet = $f7.sheet.create({
                      content: `
												<div class="sheet-modal sheet-modal-cover">
													<div class="sheet-modal-inner">
														<div class="block-title" style="text-align:center;">Pick New Cover</div>
														${html}
														<div class="block" style="text-align:center;">
															<button class="button button-fill close-sheet">Cancel</button>
														</div>
													</div>
												</div>
											`,
                      closeByBackdropClick: true,
                    });

                    sheet.open();

                    sheet.$el.find(".close-sheet").on("click", () => {
                      sheet.close();
                    });

                    sheet.$el.find(".media-option img").each((el) => {
                      el.addEventListener("click", async () => {
                        const real = el.dataset.full;
                        const parts = real.split("/");
                        const filename = parts[parts.length - 1];
                        await fetch(`${server}/album/${albumId}/update`, {
                          method: "POST",
                          headers: { Authorization: `Bearer ${token}` },
                          body: new URLSearchParams({
                            new_cover_filename: filename,
                          }),
                        });
                        sheet.close();
                        $f7.dialog.alert("Cover updated!", "Success");
                        $f7.views.main.router.refreshPage();
                      });
                    });
                  } catch (e) {
                    console.error(e);
                    $f7.dialog.close();
                    $f7.dialog.alert("Failed to load media.");
                  }
                },
              },
              {
                text: "Delete Album",
                color: "red",
                onClick: async () => {
                  $f7.dialog.confirm(
                    "Are you sure you want to delete this album?",
                    "Delete",
                    async () => {
                      await fetch(`${server}/album/${albumId}/delete`, {
                        method: "POST",
                        headers: { Authorization: `Bearer ${token}` },
                        body: new URLSearchParams({
                          confirm_name: details.querySelector("h1").textContent,
                        }),
                      });
                      $f7.views.main.router.back();
                    }
                  );
                },
              },
            ],
          ],
        });
        actions.open();
      };
    });
    return $render;
  };
</script>

<style>
  .dialog-media-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 8px;
    padding: 1rem;
  }
  .dialog-media-grid img {
    width: 100%;
    height: auto;
    border-radius: 8px;
    object-fit: cover;
    cursor: pointer;
  }
  .sheet-modal-cover-picker {
    max-height: 50vh;
    overflow-y: auto;
  }
  .sheet-modal-cover .block {
    margin: 0;
  }
</style>
