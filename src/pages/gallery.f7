<template>
  <div class="page">
    <div class="navbar">
      <div class="navbar-inner">
        <div class="title">Gallery</div>
      </div>
    </div>
    <div class="page-content" id="galleryContainer">
      <!-- Dynamic content inserted here -->
    </div>
  </div>
</template>

<script>
  import store from "../js/store.js";
  import localforage from "localforage";
  import "fslightbox";

  export default (props, { $f7, $onMounted }) => {
    $onMounted(async () => {
      const token = store.state.token;
      const server = store.state.server;
      const container = document.getElementById("galleryContainer");
      if (!token) {
        $f7.views.main.router.navigate("/login");
        return;
      }
      if (!container) return;

      const isImage = (f) => /\.(jpe?g|png|gif|webp|bmp)$/i.test(f);
      const isVideo = (f) => /\.(mp4|webm|mov|avi|mkv)$/i.test(f);

      let allItems = [];

      const cached = await localforage.getItem("gallery");
      if (cached) renderGallery(cached);

      try {
        const res = await fetch(`${server}/gallery`, {
          headers: { Authorization: `Bearer ${token}` },
        });
        if (!res.ok) throw new Error("Failed to fetch gallery");
        const data = await res.json();
        await localforage.setItem("gallery", data);
        renderGallery(data);
      } catch (err) {
        console.error("[Gallery] Load error:", err);
        container.innerHTML = `<p style="padding: 1rem; color: red;">Failed to load gallery.</p>`;
      }

      function renderGallery(grouped) {
        console.log("[Gallery] Rendering gallery...");

        container.innerHTML = "";
        let preloadSources = [];

        Object.entries(grouped).forEach(([month, items]) => {
          console.log(`[Gallery] Month: ${month}`);
          const header = document.createElement("div");
          header.className = "gallery-month-header";
          header.textContent = month;
          container.appendChild(header);

          const grid = document.createElement("div");
          grid.className = "gallery-grid";
          container.appendChild(grid);

          items.forEach((item, index) => {
            const fullSrc = `${server}/uploads/${item.filename}`;
            const baseName = item.filename.split(".")[0];
            const isImg = isImage(item.filename);
            const isVid = isVideo(item.filename);
            const previewSrc = isVid
              ? `${server}/uploads/preview_${baseName}.jpg`
              : `${server}/uploads/preview_${item.filename}`;

            console.log(`[Gallery] Item ${index}:`, {
              filename: item.filename,
              isImage: isImg,
              isVideo: isVid,
              fullSrc,
              previewSrc,
            });

            const anchor = document.createElement("a");
            anchor.href = fullSrc;
            anchor.classList.add("external");
            anchor.setAttribute("data-fslightbox", "gallery");

            const img = document.createElement("img");
            img.src = previewSrc;
            img.alt = item.caption || "";
            img.draggable = false;

            img.onerror = () => {
              console.error(
                "[Gallery] Failed to load preview image:",
                previewSrc
              );
            };

            img.onload = () => {
              console.log("[Gallery] Loaded preview image:", previewSrc);
            };

            const tile = document.createElement("div");
            tile.className = "media-tile";

            if (isVid) {
              const icon = document.createElement("div");
              icon.className = "media-icon";
              icon.innerHTML = `<i class="f7-icons">play_circle_fill</i>`;
              anchor.appendChild(icon);
            }

            anchor.appendChild(img);
            tile.appendChild(anchor);
            grid.appendChild(tile);

            preloadSources.push(
              isVid ? { source: fullSrc, type: "video" } : fullSrc
            );
          });
        });

        window.fslightboxInstances = window.fslightboxInstances || {};
        window.fslightboxInstances.gallery = {
          sources: preloadSources,
        };

        if (typeof refreshFsLightbox === "function") {
          console.log("[Gallery] Calling refreshFsLightbox()");
          refreshFsLightbox();
        } else {
          console.warn("[Gallery] FsLightbox not ready yet.");
        }
      }
    });

    return $render;
  };
</script>

<style>
  .gallery-month-header {
    font-size: 1.25rem;
    font-weight: bold;
    margin: 1rem 1rem 0.5rem;
    color: #d2d2d2;
    border-bottom: 1px solid #ccc;
    padding-bottom: 0.25rem;
  }

  .gallery-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(70px, 1fr));
    gap: 8px;
    padding: 0 1rem 1rem;
  }

  .media-tile img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: 8px;
    cursor: pointer;
    aspect-ratio: 1 / 1;
    background: #f0f0f0;
  }

  .media-icon {
    position: absolute;
    bottom: 4px;
    right: 4px;
    background: rgba(0, 0, 0, 0.6);
    border-radius: 50%;
    padding: 4px;
    color: white;
    font-size: 16px;
    pointer-events: none;
  }
</style>
