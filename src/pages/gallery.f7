<template>
  <div class="page-content" id="galleryContainer"></div>
</template>

<script>
  import store from "../js/store.js";
  import localforage from "localforage";
  import "fslightbox";

  export default (props, { $f7, $onMounted, $f7route = null }) => {
    let albumId = null;
    let user = null;

    if (props && props.albumId) {
      albumId = props.albumId;
    } else if ($f7route && $f7route.query && $f7route.query.albumId) {
      albumId = $f7route.query.albumId;
    }
    if (props && props.user) {
      user = props.user;
    } else if ($f7route && $f7route.query && $f7route.query.user) {
      user = $f7route.query.user;
    }

    $onMounted(async () => {
      const token = store.state.token;
      const server = store.state.server;
      const container = document.getElementById("galleryContainer");
      if (!token) {
        console.log("[Gallery] No token, redirecting to login");
        $f7.views.main.router.navigate("/login");
        return;
      }
      if (!container) {
        console.warn("[Gallery] No container found");
        return;
      }

      const isImage = (f) => /\.(jpe?g|png|gif|webp|bmp)$/i.test(f);
      const isVideo = (f) => /\.(mp4|webm|mov|avi|mkv)$/i.test(f);

      const cached = await localforage.getItem("gallery");
      if (cached && !albumId && !user) {
        console.log("[Gallery] Using cached data");
        renderGallery(cached);
      }

      try {
        let endpoint;
        if (albumId) {
          endpoint = `${server}/album/${albumId}/media`;
        } else if (user) {
          endpoint = `${server}/gallery/user/${user}`;
        } else {
          endpoint = `${server}/gallery`;
        }

        const res = await fetch(endpoint, {
          headers: { Authorization: `Bearer ${token}` },
        });

        if (!res.ok) throw new Error("Failed to fetch gallery");
        const data = await res.json();
        console.log("[Gallery] Data fetched:", data);
        await localforage.setItem("gallery", data);
        renderGallery(data);
      } catch (err) {
        console.error("[Gallery] Load error:", err);
        container.innerHTML = `<p style="padding: 1rem; color: red;">Failed to load gallery.</p>`;
      }

      function renderGallery(grouped) {
        console.log("[Gallery] Rendering...");

        let selectionMode = false;
        let selectedItems = new Set();
        let dragStartIndex = null;
        let dragEndIndex = null;
        let isDragging = false;
        let baseSelection = new Set();

        container.innerHTML = "";

        const topbar = document.createElement("div");
        topbar.className = "gallery-topbar";
        topbar.style.display = "none";
        topbar.innerHTML = `
	<div class="gallery-toolbar">
		<div class="gallery-toolbar-left">
			<button class="toolbar-button gallery-close" title="Cancel">
				<i class="f7-icons">xmark_circle_fill</i>
			</button>
			<span class="gallery-count">0 selected</span>
		</div>
		<div class="gallery-toolbar-right">
			<button class="toolbar-button" id="editDateBtn" title="Edit Date">
				<i class="f7-icons">calendar</i>
			</button>
			<button class="toolbar-button" id="addToAlbumBtn" title="Add to Album">
				<i class="f7-icons">folder_badge_plus</i>
			</button>
			<button class="toolbar-button remove" id="removeFromAlbumBtn" title="Remove from Album" style="display:none;">
				<i class="f7-icons">folder_badge_minus</i>
			</button>
		</div>
	</div>
`;
        container.before(topbar);

        console.log("[Gallery] Topbar inserted");

        topbar.querySelector(".gallery-close").onclick = () => clearSelection();

        const editBtn = topbar.querySelector("#editDateBtn");
        if (editBtn) {
          console.log("[Gallery] Edit Date button found");
          editBtn.addEventListener("click", () => {
            console.log("[Gallery] Edit Date button clicked");

            const dialog = document.createElement("div");
            dialog.className = "edit-dialog";
            dialog.innerHTML = `
							<div class="dialog-overlay"></div>
							<div class="dialog-box">
								<h3>Edit Date</h3>
								<label>Date: <input type="date" id="edit-date-input" required></label>
								<label>Time: <input type="time" id="edit-time-input" required></label>
								<div class="dialog-buttons">
									<button id="cancel-edit">Cancel</button>
									<button id="confirm-edit">Save</button>
								</div>
							</div>
						`;
            document.body.appendChild(dialog);
            console.log("[Gallery] Edit dialog opened");

            dialog.querySelector("#cancel-edit").onclick = () => {
              console.log("[Gallery] Edit cancelled");
              dialog.remove();
            };

            dialog.querySelector("#confirm-edit").onclick = async () => {
              const date = dialog.querySelector("#edit-date-input").value;
              const time = dialog.querySelector("#edit-time-input").value;
              if (!date || !time) {
                alert("Please enter both date and time.");
                return;
              }
              const datetime = new Date(`${date}T${time}`);
              const timestamp = Math.floor(datetime.getTime() / 1000);

              if (!timestamp || selectedItems.size === 0) {
                alert("No items selected or invalid time.");
                return;
              }

              const formData = new FormData();
              for (const filename of selectedItems) {
                formData.append("filenames", filename);
              }
              formData.append("timestamp", timestamp);

              await fetch(`${server}/media/edit_dates`, {
                method: "POST",
                headers: { Authorization: `Bearer ${token}` },
                body: formData,
              });

              dialog.remove();
              $f7.toast
                .create({ text: "Dates updated!", closeTimeout: 2000 })
                .open();
              $f7.views.main.router.refreshPage();
            };
          });
        } else {
          console.warn("[Gallery] Edit Date button not found!");
        }

        const addToAlbumBtn = topbar.querySelector("#addToAlbumBtn");

        addToAlbumBtn.addEventListener("click", async () => {
          if (selectedItems.size === 0) {
            alert("Select items first!");
            return;
          }

          try {
            const res = await fetch(`${server}/albums`, {
              headers: { Authorization: `Bearer ${token}` },
            });
            if (!res.ok) throw new Error("Failed to fetch albums");

            const albums = await res.json();
            if (albums.length === 0) {
              alert("No albums available. Create one first!");
              return;
            }

            const selectHtml = albums
              .map(
                (album) =>
                  `<option value="${album.id}">${album.name} (${album.media_count})</option>`
              )
              .join("");

            const dialog = document.createElement("div");
            dialog.className = "edit-dialog";
            dialog.innerHTML = `
			<div class="dialog-overlay"></div>
			<div class="dialog-box">
				<h3>Add to Album</h3>
				<label>
					<select id="album-select" style="width:100%; padding:0.5rem;">
						${selectHtml}
					</select>
				</label>
				<div class="dialog-buttons">
					<button id="cancel-add">Cancel</button>
					<button id="confirm-add">Add</button>
				</div>
			</div>
		`;
            document.body.appendChild(dialog);

            dialog.querySelector("#cancel-add").onclick = () => dialog.remove();

            dialog.querySelector("#confirm-add").onclick = async () => {
              const targetAlbumId = dialog.querySelector("#album-select").value;
              if (!targetAlbumId) {
                alert("Please select an album.");
                return;
              }

              const formData = new FormData();
              for (const filename of selectedItems) {
                formData.append("filenames", filename);
              }

              await fetch(`${server}/album/${targetAlbumId}/add`, {
                // âœ… use targetAlbumId
                method: "POST",
                headers: { Authorization: `Bearer ${token}` },
                body: formData,
              });

              dialog.remove();
              clearSelection();
              $f7.toast
                .create({
                  text: `Added ${selectedItems.size} items to album.`,
                  closeTimeout: 2000,
                })
                .open();
            };
          } catch (err) {
            console.error("[Gallery] Failed to add to album:", err);
            alert("Failed to fetch albums. Try again later.");
          }
        });

        const removeFromAlbumBtn = topbar.querySelector("#removeFromAlbumBtn");
        if (albumId) {
          removeFromAlbumBtn.style.display = "inline-flex";
        } else {
          removeFromAlbumBtn.style.display = "none";
        }

        removeFromAlbumBtn.addEventListener("click", async () => {
          if (selectedItems.size === 0) {
            alert("Select items first!");
            return;
          }

          if (!albumId) {
            alert("No album context to remove from.");
            return;
          }

          try {
            const confirmRemove = confirm(
              `Remove ${selectedItems.size} item(s) from this album?`
            );
            if (!confirmRemove) return;

            const formData = new FormData();
            for (const filename of selectedItems) {
              formData.append("filenames", filename);
            }

            await fetch(`${server}/album/${albumId}/remove`, {
              method: "POST",
              headers: { Authorization: `Bearer ${token}` },
              body: formData,
            });

            clearSelection();
            $f7.toast
              .create({ text: "Removed from album!", closeTimeout: 2000 })
              .open();
            $f7.views.main.router.refreshPage();
          } catch (err) {
            console.error("[Gallery] Failed to remove from album:", err);
            alert("Failed to remove items. Try again later.");
          }
        });

        function updateUIState() {
          console.log("[Gallery] Selection size:", selectedItems.size);
          topbar.style.display = selectionMode ? "flex" : "none";
          topbar.querySelector(
            ".gallery-count"
          ).textContent = `${selectedItems.size} selected`;
          document.body.classList.toggle("selection-mode", selectionMode);
        }

        function clearSelection() {
          console.log("[Gallery] Clearing selection");
          selectionMode = false;
          selectedItems.clear();
          document
            .querySelectorAll(".media-tile.selected")
            .forEach((t) => t.classList.remove("selected"));
          updateUIState();
        }

        let allItems = Object.entries(grouped)
          .flatMap(([month, items]) =>
            items.map((item) => ({
              ...item,
              month,
              sort_time: item.date_taken || item.timestamp,
            }))
          )
          .sort((a, b) => b.sort_time - a.sort_time);

        const sortedByMonth = {};
        allItems.forEach((item) => {
          if (!sortedByMonth[item.month]) sortedByMonth[item.month] = [];
          sortedByMonth[item.month].push(item);
        });

        const observer = new IntersectionObserver(
          (entries) => {
            entries.forEach((entry) => {
              if (entry.isIntersecting) {
                const img = entry.target;
                img.src = img.dataset.src;
                observer.unobserve(img);
              }
            });
          },
          { rootMargin: "100px", threshold: 0.1 }
        );

        const tileElements = [];

        for (const [month, items] of Object.entries(sortedByMonth)) {
          const header = document.createElement("div");
          header.className = "gallery-month-header";
          header.textContent = month;
          container.appendChild(header);

          const grid = document.createElement("div");
          grid.className = "gallery-grid";
          container.appendChild(grid);

          items.forEach((item) => {
            const fullSrc = `${server}/uploads/${item.filename}`;
            const baseName = item.filename.split(".")[0];
            const isImg = isImage(item.filename);
            const isVid = isVideo(item.filename);
            const previewSrc = isVid
              ? `${server}/uploads/preview_${baseName}.jpg`
              : `${server}/uploads/preview_${item.filename}`;

            const anchor = document.createElement("a");
            anchor.href = fullSrc;
            anchor.classList.add("external");
            anchor.setAttribute("data-fslightbox", "gallery");
            anchor.draggable = false;
            anchor.addEventListener("click", (e) => {
              if (selectionMode) {
                e.preventDefault();
                e.stopImmediatePropagation();
              }
            });

            // Prevent long-press menu on Android
            anchor.addEventListener("contextmenu", (e) => e.preventDefault());

            const img = document.createElement("img");
            img.dataset.src = previewSrc;
            img.alt = item.caption || "";
            img.draggable = false;
            img.onerror = () => console.error("Failed preview:", previewSrc);

            // Prevent long-press menu on Android
            img.addEventListener("contextmenu", (e) => e.preventDefault());

            observer.observe(img);

            const tile = document.createElement("div");
            tile.className = "media-tile";
            tile.dataset.index = tileElements.length;
            tile.dataset.filename = item.filename;
            tileElements.push(tile);

            const checkCircle = document.createElement("div");
            checkCircle.className = "check-circle";
            checkCircle.innerHTML = `<i class="f7-icons">checkmark_circle_fill</i>`;
            tile.appendChild(checkCircle);

            let holdTimer = null;
            let longPressed = false;

            let inverseMode = false; // ðŸ”¹ Add at top of renderGallery

            tile.addEventListener("pointerdown", (e) => {
              e.preventDefault();
              e.stopPropagation();
              longPressed = false;
              isDragging = false;

              inverseMode = e.altKey || e.metaKey; // âœ… hold Alt or Command for inverse mode

              holdTimer = setTimeout(() => {
                longPressed = true;
                if (!selectionMode) {
                  console.log("[Gallery] Entering selection mode");
                  selectionMode = true;
                  updateUIState();
                }
                isDragging = true;
                dragStartIndex = Number(tile.dataset.index);
                dragEndIndex = dragStartIndex;

                baseSelection = new Set(selectedItems);
                selectedItems = new Set(baseSelection);

                if (inverseMode) {
                  if (selectedItems.has(item.filename)) {
                    selectedItems.delete(item.filename);
                    tile.classList.remove("selected");
                  } else {
                    selectedItems.add(item.filename);
                    tile.classList.add("selected");
                  }
                } else {
                  selectedItems.add(item.filename);
                  tile.classList.add("selected");
                }
                updateUIState();
              }, 500);
            });

            tile.addEventListener("pointerenter", () => {
              if (!isDragging || dragStartIndex === null) return;
              dragEndIndex = Number(tile.dataset.index);
              const [min, max] = [dragStartIndex, dragEndIndex].sort(
                (a, b) => a - b
              );

              selectedItems = new Set(baseSelection); // Start from base
              tileElements.forEach((el, i) => {
                const fname = el.dataset.filename;
                const inRange = i >= min && i <= max;

                if (inRange) {
                  if (inverseMode) {
                    if (baseSelection.has(fname)) {
                      selectedItems.delete(fname);
                      el.classList.remove("selected");
                    } else {
                      selectedItems.add(fname);
                      el.classList.add("selected");
                    }
                  } else {
                    selectedItems.add(fname);
                    el.classList.add("selected");
                  }
                } else {
                  if (!selectedItems.has(fname)) {
                    el.classList.remove("selected");
                  }
                }
              });
              updateUIState();
            });

            tile.addEventListener("pointerup", () => {
              clearTimeout(holdTimer);

              if (!longPressed && !isDragging && selectionMode) {
                const isSelected = selectedItems.has(item.filename);
                if (isSelected) {
                  selectedItems.delete(item.filename);
                  tile.classList.remove("selected");
                } else {
                  selectedItems.add(item.filename);
                  tile.classList.add("selected");
                }
                if (selectedItems.size === 0) selectionMode = false;
                updateUIState();
              }

              isDragging = false;
              dragStartIndex = null;
              dragEndIndex = null;
            });

            tile.addEventListener("pointerleave", () =>
              clearTimeout(holdTimer)
            );

            if (isVid) {
              const icon = document.createElement("div");
              icon.className = "media-icon";
              icon.innerHTML = `<i class="f7-icons">play_circle_fill</i>`;
              anchor.appendChild(icon);
            }

            anchor.appendChild(img);
            tile.appendChild(anchor);
            grid.appendChild(tile);
          });
        }

        window.addEventListener("pointerup", () => {
          isDragging = false;
          dragStartIndex = null;
          dragEndIndex = null;
        });

        if (typeof refreshFsLightbox === "function") {
          refreshFsLightbox();
        } else {
          console.warn("[Gallery] FsLightbox not ready yet.");
        }
      }
    });
    return $render;
  };
</script>

<style>
  .page[data-name="gallery-wrapper"] .page-content {
    padding-top: 44px; /* or 48px if your toolbar is bigger */
  }

  .gallery-month-header {
    font-size: 1.25rem;
    font-weight: bold;
    margin: 1rem 1rem 0.5rem;
    color: black;
    border-bottom: 1px solid #ccc;
    padding-bottom: 0.25rem;
  }

  .gallery-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(60px, 1fr));
    gap: 8px;
    padding: 0 1rem 1rem;
  }

  .media-tile {
    position: relative;
    user-select: none;
    -webkit-user-drag: none;
  }

  .media-tile img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: 8px;
    cursor: pointer;
    aspect-ratio: 1 / 1;
    background: #f0f0f0;
  }

  .media-icon {
    position: absolute;
    bottom: 4px;
    right: 4px;
    background: rgba(0, 0, 0, 0.6);
    border-radius: 50%;
    padding: 4px;
    color: white;
    font-size: 16px;
    pointer-events: none;
  }

  .check-circle {
    display: none;
    position: absolute;
    top: 6px;
    left: 6px;
    width: 20px;
    height: 20px;
    border-radius: 50%;
    border: 2px solid white;
    background: rgba(0, 0, 0, 0.4);
    z-index: 10;
  }

  .media-tile.selected .check-circle,
  .selection-mode .media-tile .check-circle {
    display: block;
  }

  .media-tile.selected {
    border: 2px solid #007aff;
    box-shadow: 0 0 4px #007aff;
  }

  .check-circle i {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    margin: auto;
    width: 100%;
    height: 100%;
    font-size: 20px;
    color: #007aff;
    display: none;
  }

  .media-tile.selected .check-circle i {
    display: block;
  }

  #galleryContainer {
    user-select: none;
  }
  .edit-dialog {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 9999999;
  }

  .edit-dialog .dialog-overlay {
    position: absolute;
    inset: 0;
    background: rgba(0, 0, 0, 0.5);
  }

  .edit-dialog .dialog-box {
    position: relative;
    background: #fff;
    color: #000;
    padding: 1rem;
    border-radius: 12px;
    z-index: 1;
    width: 90%;
    max-width: 320px;
    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.3);
  }

  .dialog-box h3 {
    margin-top: 0;
    font-size: 1.2rem;
  }

  .dialog-box label {
    display: block;
    margin: 0.5rem 0;
  }

  .dialog-buttons {
    display: flex;
    justify-content: flex-end;
    gap: 0.5rem;
    margin-top: 1rem;
  }

  .dialog-buttons button {
    padding: 0.5rem 1rem;
    border: none;
    border-radius: 6px;
    background: #007aff;
    color: #fff;
    cursor: pointer;
    font-weight: bold;
  }
  .dialog-buttons button#cancel-edit {
    background: #aaa;
  }
  @media (prefers-color-scheme: dark) {
    .gallery-month-header {
      color: #ccc;
      border-bottom: 1px solid #333;
    }
  }

  .page-content {
    /* padding-top: 92px; */
    padding-bottom: 80px;
    /* overflow: auto;
    -webkit-overflow-scrolling: touch; */
  }

  .gallery-topbar {
    position: fixed;
    top: 44px;
    left: 0;
    right: 0;
    background: rgba(255, 255, 255, 0.9);
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
    border-bottom: 1px solid #ddd;
    padding: 0.5rem 0;
    z-index: 100;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
  }

  .gallery-toolbar {
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: 0.5rem;
    padding: 0 0.5rem;
    white-space: nowrap;
    overflow: hidden;
    box-sizing: border-box;
    width: 100%;
  }

  .gallery-toolbar-left {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    flex-shrink: 0;
  }

  .gallery-toolbar-right {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    justify-content: flex-end;
    flex-grow: 1; /* ðŸ”¥ this pushes the buttons fully to the right */
  }

  .toolbar-button {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 40px;
    height: 40px;
    background: #007aff;
    color: white;
    border-radius: 50%;
    font-size: 14px;
    border: none;
    flex-shrink: 0;
    cursor: pointer;
  }

  .toolbar-button.remove {
    background: #ff3b30;
  }

  .toolbar-button i {
    font-size: 18px;
  }

  .gallery-count {
    font-weight: bold;
    font-size: 1.1rem;
    color: #333;
    white-space: nowrap;
    flex-shrink: 0;
  }

  @media (prefers-color-scheme: dark) {
    .gallery-topbar {
      background: rgba(17, 17, 17, 0.9);
      border-bottom: 1px solid #333;
    }
    .gallery-count {
      color: #eee;
    }
    .toolbar-button {
      background: #0a84ff;
    }
  }
</style>
