<template>
  <div class="page">
    <div class="navbar">
      <div class="navbar-inner">
        <div class="right">
          <a href="#" class="html-toggle">HTML</a>
          <br />
          <a href="#" class="edit-toggle">Edit</a>
        </div>
      </div>
    </div>
    <div class="page-content">
      <div
        id="profile-room-content"
        style="padding: 1rem; font-family: sans-serif"
      >
        Loading profile...
      </div>
      <br />
    </div>
  </div>
</template>

<script>
  import store, { getCachedUser } from "../js/store.js";

  export default (props, { $, $onMounted, $f7route }) => {
    let originalRoomHtml = "";
    let editMode = false;
    let currentUserData = {};

    const tagsWithTextContent = new Set(["pf-name", "pf-bio"]);

    const customTagRenderers = {
      "pf-avatar": async (tag, userData, server, token) => {
        const wrapper = document.createElement("div");
        wrapper.className = "pf-avatar rendered-tag";
        wrapper.dataset.tag = "pf-avatar";
        for (const attr of tag.attributes) {
          wrapper.dataset[`attr_${attr.name}`] = attr.value;
        }
        const img = document.createElement("img");
        img.className = "pf-avatar";
        img.alt = userData?.username || "Avatar";
        img.src = "/default-pfp.svg";
        if (userData?.avatar) {
          try {
            const res = await fetch(`${server}/avatar/${userData.avatar}`, {
              headers: { Authorization: `Bearer ${token}` },
            });
            if (res.ok) {
              const blob = await res.blob();
              img.src = URL.createObjectURL(blob);
            }
          } catch {}
        }
        wrapper.appendChild(img);
        tag.replaceWith(wrapper);
      },

      "pf-name": (tag, userData) => {
        const wrapper = document.createElement("div");
        wrapper.className = "pf-name rendered-tag";
        wrapper.dataset.tag = "pf-name";
        for (const attr of tag.attributes) {
          wrapper.dataset[`attr_${attr.name}`] = attr.value;
        }
        wrapper.textContent = userData?.name || userData?.username || "Unknown";
        tag.replaceWith(wrapper);
      },

      "pf-bio": (tag) => {
        const wrapper = document.createElement("div");
        wrapper.className = "pf-bio rendered-tag";
        wrapper.dataset.tag = "pf-bio";
        for (const attr of tag.attributes) {
          wrapper.dataset[`attr_${attr.name}`] = attr.value;
        }
        wrapper.textContent = tag.textContent.trim();
        tag.replaceWith(wrapper);
      },
      "pf-feed": async (tag, userData, server, token) => {
        const wrapper = document.createElement("div");
        wrapper.className = "pf-feed-grid rendered-tag";
        wrapper.dataset.tag = "pf-feed";

        for (const attr of tag.attributes) {
          wrapper.dataset[`attr_${attr.name}`] = attr.value;
        }

        try {
          const res = await fetch(`${server}/my_uploads`, {
            headers: { Authorization: `Bearer ${token}` },
          });
          const feed = await res.json();

          feed.reverse().forEach((item) => {
            const ext = item.filename.split(".").pop().toLowerCase();
            const isImage = /\.(jpe?g|png|gif|webp|bmp)$/i.test(ext);
            const isVideo = /\.(mp4|webm|mov|avi|mkv)$/i.test(ext);

            let el;
            if (isVideo) {
              el = document.createElement("video");
              el.controls = true;
              el.src = `${server}/uploads/${item.filename}`;
              el.style.maxWidth = "100%";
              el.style.marginTop = "1rem";
              el.style.borderRadius = "12px";
              wrapper.appendChild(el);
            } else if (isImage) {
              el = document.createElement("img");
              el.src = `${server}/uploads/${item.filename}`;
              el.alt = item.caption || "";
              el.style.maxWidth = "100%";
              el.style.marginTop = "1rem";
              el.style.borderRadius = "12px";
              wrapper.appendChild(el);
            }
          });
        } catch {
          wrapper.textContent = "Unable to load feed.";
        }

        tag.replaceWith(wrapper);
      },
    };

    const renderCustomTags = async (
      container,
      username,
      userData,
      isEditMode = false
    ) => {
      const token = store.state.token;
      const server = store.state.server;
      const nodes = container.querySelectorAll("*");

      for (const node of nodes) {
        const tag = node.tagName.toLowerCase();

        if (tag === "pf-feed" && isEditMode) {
          const wrapper = document.createElement("div");
          wrapper.className = "pf-feed-grid rendered-tag";
          wrapper.dataset.tag = "pf-feed";
          for (const attr of node.attributes) {
            wrapper.dataset[`attr_${attr.name}`] = attr.value;
          }

          try {
            const res = await fetch(`${server}/my_uploads`, {
              headers: { Authorization: `Bearer ${token}` },
            });
            const feed = await res.json();

            if (feed.length > 0) {
              const first = feed[feed.length - 1];
              const ext = first.filename.split(".").pop().toLowerCase();
              const isImage = /\.(jpe?g|png|gif|webp|bmp)$/i.test(ext);
              const isVideo = /\.(mp4|webm|mov|avi|mkv)$/i.test(ext);

              let preview;
              if (isVideo) {
                preview = document.createElement("video");
                preview.muted = true;
                preview.playsInline = true;
                preview.preload = "metadata";
              } else if (isImage) {
                preview = document.createElement("img");
              } else {
                preview = document.createElement("div");
                preview.textContent = "Unsupported preview";
              }

              preview.src = `${server}/uploads/${first.filename}`;
              Object.assign(preview.style, {
                opacity: "0.3",
                borderRadius: "14px",
                pointerEvents: "none",
                width: "100%",
                maxWidth: "600px",
                display: "block",
                margin: "0 auto",
              });

              const overlay = document.createElement("div");
              overlay.textContent = "Feed Module";
              Object.assign(overlay.style, {
                position: "absolute",
                top: "50%",
                left: "50%",
                transform: "translate(-50%, -50%)",
                color: "#fff",
                background: "rgba(0, 0, 0, 0.5)",
                padding: "0.5rem 1rem",
                borderRadius: "8px",
                fontWeight: "bold",
                pointerEvents: "none",
              });

              const containerDiv = document.createElement("div");
              Object.assign(containerDiv.style, {
                position: "relative",
                display: "inline-block",
                width: "100%",
                maxWidth: "600px",
                marginTop: "1rem",
              });

              containerDiv.appendChild(preview);
              containerDiv.appendChild(overlay);
              wrapper.appendChild(containerDiv);
            } else {
              wrapper.textContent = "No feed to display.";
            }
          } catch {
            wrapper.textContent = "Unable to load feed.";
          }

          node.replaceWith(wrapper);
          continue;
        }

        if (customTagRenderers[tag] && !(tag === "pf-feed" && isEditMode)) {
          await customTagRenderers[tag](node, userData, server, token);
        } else if (tag.startsWith("pf-")) {
          const wrapper = document.createElement("div");
          wrapper.className = `${tag} rendered-tag`;
          wrapper.dataset.tag = tag;
          for (const attr of node.attributes) {
            wrapper.dataset[`attr_${attr.name}`] = attr.value;
          }
          wrapper.textContent = node.textContent.trim();
          node.replaceWith(wrapper);
        }
      }
    };

    function enterEditMode(container) {
      const room = container.querySelector(".pf-room");
      if (!room) return;

      Array.from(room.children).forEach((child) => {
        if (child.classList.contains("edit-block")) return;

        const tag = child.dataset?.tag || child.tagName.toLowerCase();

        const wrapper = document.createElement("div");
        wrapper.className = "edit-block";
        wrapper.dataset.tag = tag;
        wrapper.setAttribute("draggable", "true");

        Object.assign(wrapper.style, {
          border: "2px dashed #007aff",
          padding: "0.75rem",
          marginBottom: "1rem",
          position: "relative",
        });

        wrapper.addEventListener("dragstart", (e) => {
          e.dataTransfer.setData("text/plain", "");
          wrapper.classList.add("dragging");
        });
        wrapper.addEventListener("dragend", () => {
          wrapper.classList.remove("dragging");
        });
        wrapper.addEventListener("dragover", (e) => {
          e.preventDefault();
          const dragging = room.querySelector(".dragging");
          if (dragging && dragging !== wrapper) {
            room.insertBefore(dragging, wrapper);
          }
        });

        const deleteBtn = document.createElement("button");
        deleteBtn.className = "editor-ui";
        deleteBtn.textContent = "âœ•";
        Object.assign(deleteBtn.style, {
          position: "absolute",
          top: "4px",
          left: "4px",
          background: "#ff3b30",
          color: "white",
          border: "none",
          borderRadius: "50%",
          width: "24px",
          height: "24px",
          cursor: "pointer",
        });
        deleteBtn.onclick = (e) => {
          e.preventDefault();
          e.stopPropagation();
          wrapper.remove();
        };
        wrapper.appendChild(deleteBtn);

        if (tagsWithTextContent.has(tag)) {
          const preview = document.createElement("div");
          preview.textContent = child.textContent.trim();
          preview.style.marginRight = "2.5rem";

          const textarea = document.createElement("textarea");
          textarea.value = child.textContent.trim();
          textarea.style.display = "none";
          textarea.style.width = "100%";
          textarea.style.minHeight = "3rem";
          textarea.style.marginTop = "0.5rem";
          textarea.className = "editor-ui editable-textarea";

          const editBtn = document.createElement("button");
          editBtn.className = "editor-ui";
          editBtn.textContent = "âœŽ";
          Object.assign(editBtn.style, {
            position: "absolute",
            top: "4px",
            right: "4px",
            background: "#007aff",
            color: "white",
            border: "none",
            borderRadius: "50%",
            width: "24px",
            height: "24px",
            cursor: "pointer",
          });
          editBtn.onclick = (e) => {
            e.preventDefault();
            e.stopPropagation();
            const editing = textarea.style.display !== "none";
            if (editing) preview.textContent = textarea.value.trim();
            textarea.style.display = editing ? "none" : "block";
            preview.style.display = editing ? "block" : "none";
            if (!editing) textarea.focus();
          };

          wrapper.appendChild(editBtn);
          wrapper.appendChild(preview);
          wrapper.appendChild(textarea);
        } else {
          wrapper.appendChild(child.cloneNode(true));
        }

        child.replaceWith(wrapper);
      });
    }

    function saveEdits(container) {
      const room = container.querySelector(".pf-room");
      if (!room) return;

      const cleanRoom = room.cloneNode(true);

      cleanRoom.querySelectorAll(".edit-block").forEach((block) => {
        const tag = block.dataset.tag;
        let replacement;

        if (tag === "pf-bio") {
          const textarea = block.querySelector("textarea");
          replacement = document.createElement("pf-bio");
          replacement.textContent = textarea?.value?.trim() || "";
        } else {
          const fragment = document.createDocumentFragment();
          Array.from(block.childNodes).forEach((child) => {
            if (!child.classList || !child.classList.contains("editor-ui")) {
              fragment.appendChild(child);
            }
          });
          block.replaceWith(fragment);
          return;
        }

        block.replaceWith(replacement);
      });

      cleanRoom.querySelectorAll(".rendered-tag").forEach((el) => {
        const tag = el.dataset?.tag;
        if (!tag) return;

        const newEl = document.createElement(tag);
        for (const [key, value] of Object.entries(el.dataset)) {
          if (key.startsWith("attr_")) {
            newEl.setAttribute(key.replace("attr_", ""), value);
          }
        }

        if (tag === "pf-bio") {
          newEl.textContent = el.textContent?.trim() || "";
        }

        el.replaceWith(newEl);
      });

      cleanRoom.querySelectorAll(".editor-ui").forEach((el) => el.remove());

      const styles = Array.from(container.querySelectorAll("style")).map(
        (s) => s.outerHTML
      );
      const uniqueStyles = [...new Set(styles)].join("");

      const wrapper = document.createElement("div");
      wrapper.appendChild(cleanRoom);
      const newHtml = uniqueStyles + wrapper.innerHTML;

      const form = new URLSearchParams();
      form.append("html", newHtml);

      return fetch(`${store.state.server}/room/save`, {
        method: "POST",
        headers: {
          Authorization: `Bearer ${store.state.token}`,
          "Content-Type": "application/x-www-form-urlencoded",
        },
        body: form.toString(),
      });
    }

    $onMounted(async () => {
      const username = $f7route.params.username;
      const token = store.state.token;
      const server = store.state.server;
      const container = document.getElementById("profile-room-content");

      try {
        const res = await fetch(`${server}/room/${username}`, {
          headers: { Authorization: `Bearer ${token}` },
        });
        const html = await res.text();
        originalRoomHtml = html;
        container.innerHTML = html;
      } catch {
        container.innerHTML = "<p>Failed to load room.</p>";
        return;
      }

      let userData = getCachedUser(username) || { username };
      try {
        const res = await fetch(`${server}/users/${username}`, {
          headers: { Authorization: `Bearer ${token}` },
        });
        if (res.ok) {
          userData = await res.json();
          await store.dispatch("cacheUserData", userData);
        }
      } catch {}

      currentUserData = userData;
      await renderCustomTags(container, username, userData, false);

      const editBtn = document.querySelector(".edit-toggle");
      editBtn.addEventListener("click", async (e) => {
        e.preventDefault();
        if (!editMode) {
          editMode = true;
          editBtn.innerText = "Save";
          await renderCustomTags(container, username, currentUserData, true);
          enterEditMode(container);
        } else {
          await saveEdits(container);
          editMode = false;
          editBtn.innerText = "Edit";

          try {
            const res = await fetch(`${server}/room/${username}`, {
              headers: { Authorization: `Bearer ${token}` },
            });
            const newHtml = await res.text();
            container.innerHTML = newHtml;
          } catch {
            container.innerHTML = "<p>Failed to reload room after save.</p>";
            return;
          }

          await renderCustomTags(container, username, currentUserData, false);
        }
      });
      const htmlBtn = document.querySelector(".html-toggle");
      htmlBtn.addEventListener("click", (e) => {
        e.preventDefault();

        const container = document.getElementById("profile-room-content");
        const existing = container.querySelector("#raw-html-editor");
        if (existing) {
          // Already open, close it
          existing.remove();
          const existingBtn = container.querySelector("#apply-html-btn");
          if (existingBtn) existingBtn.remove();
          htmlBtn.innerText = "HTML";
          return;
        }

        const textarea = document.createElement("textarea");
        textarea.id = "raw-html-editor";
        textarea.style.width = "100%";
        textarea.style.minHeight = "300px";
        textarea.style.marginTop = "1rem";
        textarea.style.fontFamily = "monospace";
        textarea.style.fontSize = "0.85rem";
        textarea.value = originalRoomHtml;

        const applyBtn = document.createElement("button");
        applyBtn.id = "apply-html-btn";
        applyBtn.textContent = "Apply Changes";
        Object.assign(applyBtn.style, {
          marginTop: "0.5rem",
          background: "#007aff",
          color: "#fff",
          border: "none",
          padding: "0.5rem 1rem",
          borderRadius: "6px",
          cursor: "pointer",
        });

        applyBtn.onclick = async () => {
          const html = textarea.value;

          const form = new URLSearchParams();
          form.append("html", html);

          try {
            await fetch(`${store.state.server}/room/save`, {
              method: "POST",
              headers: {
                Authorization: `Bearer ${store.state.token}`,
                "Content-Type": "application/x-www-form-urlencoded",
              },
              body: form.toString(),
            });

            originalRoomHtml = html;
            container.innerHTML = html;
            await renderCustomTags(container, username, currentUserData, false);
            htmlBtn.innerText = "HTML";
            textarea.remove();
            applyBtn.remove();
          } catch {
            alert("Failed to save HTML.");
          }
        };

        container.appendChild(textarea);
        container.appendChild(applyBtn);
        htmlBtn.innerText = "Close HTML";
      });
    });

    return $render;
  };
</script>

<style>
  .navbar .right {
    position: absolute;
    right: 10px;
    top: 50%;
    transform: translateY(-50%);
  }
  .navbar .edit-toggle {
    color: #007aff;
    font-weight: bold;
    cursor: pointer;
  }
  .edit-block.dragging {
    opacity: 0.5;
  }
  .drop-indicator {
    transition: all 0.1s ease-in-out;
  }
  .navbar .html-toggle {
    color: #34c759;
    margin-left: 1rem;
    font-weight: bold;
    cursor: pointer;
  }
  .pf-feed-grid img,
  .pf-feed-grid video {
    width: 100%;
    display: block;
    border-radius: 12px;
    margin-bottom: 1rem;
  }
</style>
