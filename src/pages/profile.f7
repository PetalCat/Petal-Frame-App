<template>
  <div class="page">
    <div class="navbar">
      <div class="navbar-inner">
        <div class="left"><a href="#" class="back link">Back</a></div>
        <div class="title">Profile</div>
        <div class="right">
          <a href="#" class="edit-toggle">Edit</a>
        </div>
      </div>
    </div>
    <div class="page-content">
      <div
        id="profile-room-content"
        style="padding: 1rem; font-family: sans-serif"
      >
        Loading profile...
      </div>
    </div>
  </div>
</template>

<script>
  import store, { getCachedUser } from "../js/store.js";

  async function loadProtectedImage(url, token, imgElement) {
    try {
      if (url.startsWith("/")) {
        imgElement.src = url;
        return;
      }
      const res = await fetch(url, {
        headers: { Authorization: `Bearer ${token}` },
      });
      if (!res.ok) throw new Error("Failed to load image");
      const blob = await res.blob();
      imgElement.src = URL.createObjectURL(blob);
    } catch {
      imgElement.src = "/default-pfp.svg";
    }
  }

  export default (props, { $, $onMounted, $f7route }) => {
    let originalRoomHtml = "";
    let editMode = false;
    let currentUserData = {};

    const renderCustomTags = async (container, username, userData) => {
      const token = store.state.token;
      const server = store.state.server;

      // --- Avatar Replacement ---
      const avatarTags = container.querySelectorAll("pf-avatar");
      console.log("üîÅ Replacing", avatarTags.length, "pf-avatar tags.");
      for (const tag of avatarTags) {
        const img = document.createElement("img");
        img.className = "pf-avatar";
        img.style.width = "64px";
        img.style.height = "64px";
        img.style.borderRadius = "50%";
        img.style.objectFit = "cover";
        img.style.background = "#ccc";
        img.alt = username;
        img.src = "/default-pfp.svg";

        if (userData?.avatar) {
          const avatarUrl = `${server}/avatar/${userData.avatar}`;
          await loadProtectedImage(avatarUrl, token, img);
        }

        if (tag.parentNode) tag.parentNode.replaceChild(img, tag);
      }

      // --- Banner Replacement ---
      const bannerTags = container.querySelectorAll("pf-banner");
      console.log("üéè Replacing", bannerTags.length, "pf-banner tags.");
      for (const tag of bannerTags) {
        const bannerEl = document.createElement("div");
        bannerEl.style.padding = "1rem";
        bannerEl.style.marginBottom = "1rem";
        bannerEl.style.borderRadius = "10px";

        if (userData?.banner) {
          const bannerImg = document.createElement("img");
          bannerImg.src = `${server}/banner/${userData.banner}`;
          bannerImg.style.width = "100%";
          bannerImg.style.borderRadius = "10px";
          bannerEl.appendChild(bannerImg);
        } else {
          bannerEl.innerText = "No banner set";
          bannerEl.style.background = "#ddd";
          bannerEl.style.textAlign = "center";
        }

        if (tag.parentNode) tag.parentNode.replaceChild(bannerEl, tag);
      }

      // --- Feed Replacement ---
      const feedTags = container.querySelectorAll("pf-feed");
      console.log("üìº Replacing", feedTags.length, "pf-feed tags.");
      for (const tag of feedTags) {
        try {
          const res = await fetch(`${server}/my_uploads`, {
            headers: { Authorization: `Bearer ${token}` },
          });
          if (!res.ok) throw new Error("Failed to fetch uploads");

          const feed = await res.json();
          const feedPosts = feed.slice().reverse();
          const wrapper = document.createElement("div");
          wrapper.className = "pf-feed-grid";
          let currentCount = 4;

          const loadMoreBtn = document.createElement("button");
          loadMoreBtn.innerText = "Load More";
          loadMoreBtn.style.display = "block";
          loadMoreBtn.style.marginTop = "1rem";
          loadMoreBtn.addEventListener("click", () => {
            currentCount += 4;
            renderPosts();
          });

          const renderPosts = () => {
            wrapper.innerHTML = "";
            const postsToShow = feedPosts.slice(0, currentCount);
            for (const item of postsToShow) {
              const video = document.createElement("video");
              video.controls = true;
              video.src = `${server}/uploads/${item.filename}`;
              video.style.maxWidth = "100%";
              video.style.marginTop = "1rem";
              wrapper.appendChild(video);
            }
            if (currentCount < feedPosts.length) {
              wrapper.appendChild(loadMoreBtn);
            }
          };

          renderPosts();
          if (tag.parentNode) tag.parentNode.replaceChild(wrapper, tag);
        } catch (err) {
          console.error("‚ùå Failed to load feed:", err);
          if (tag.parentNode) {
            tag.parentNode.replaceChild(
              document.createTextNode("Unable to load feed."),
              tag
            );
          }
        }
      }
    };

    $onMounted(async () => {
      const username = $f7route.params.username;
      const token = store.state.token;
      const server = store.state.server;
      const container = document.getElementById("profile-room-content");

      let roomHtml = "";
      try {
        const res = await fetch(`${server}/room/${username}`, {
          headers: { Authorization: `Bearer ${token}` },
        });
        roomHtml = await res.text();
        if (!roomHtml.includes("pf-")) {
          roomHtml = `<div style="padding: 2rem;"><p>This user has no profile page yet.</p></div>`;
        }
      } catch (err) {
        console.warn("onMounted: Failed to fetch room HTML:", err.message);
      }
      originalRoomHtml = roomHtml;
      console.log("onMounted: Fetched room HTML:", originalRoomHtml);

      let userData = getCachedUser(username);
      if (!userData || !userData.avatar) {
        console.log("üåê Fetching user data from /users:", username);
        try {
          const res = await fetch(`${server}/users/${username}`, {
            headers: { Authorization: `Bearer ${token}` },
          });
          if (res.ok) {
            userData = await res.json();
            console.log("‚úÖ Got user data from /users:", userData);
            await store.dispatch("cacheUserData", userData);
          }
        } catch (err) {
          console.warn("‚ùå Failed to fetch user data:", err);
          userData = { username };
        }
      }

      currentUserData = userData;
      console.log("onMounted: Using userData:", currentUserData);

      container.innerHTML = originalRoomHtml;
      await renderCustomTags(container, username, userData);
    });

    return $render;
  };
</script>

<style>
  .navbar .right {
    position: absolute;
    right: 10px;
    top: 50%;
    transform: translateY(-50%);
  }
  .navbar .edit-toggle {
    color: #007aff;
    font-weight: bold;
    cursor: pointer;
  }
</style>
