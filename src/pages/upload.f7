<template>
  <div class="page">
    <div class="page-content">
      <form id="uploadForm" class="list no-hairlines-md">
        <ul>
          <li class="item-content item-input">
            <div class="item-inner">
              <div class="item-title item-label">Caption</div>
              <div class="item-input-wrap">
                <input type="text" name="caption" />
              </div>
            </div>
          </li>

          <li class="item-content item-input">
            <div class="item-inner">
              <div class="item-title item-label">Album (Optional)</div>
              <div class="item-input-wrap">
                <select name="album" id="albumSelect">
                  <option value="">— No album —</option>
                </select>
              </div>
            </div>
          </li>

          <li class="item-content item-input">
            <div class="item-inner">
              <div class="item-title item-label">Media (Photos & Videos)</div>
              <div class="item-input-wrap">
                <input
                  type="file"
                  name="files"
                  id="mediaInput"
                  accept="image/*,video/*"
                  multiple
                  required
                />
              </div>
            </div>
          </li>
        </ul>

        <div class="block">
          <button class="button button-fill" type="submit">Upload</button>
        </div>
      </form>

      <div class="block" id="statusBlock"></div>
      <div class="block" id="queueBlock"></div>
    </div>
  </div>
</template>

<script>
  import store from "../js/store.js";
  import localforage from "localforage";

  export default (props, { $f7, $onMounted, $onUnmounted }) => {
    let pollInterval = null;
    let albumSelect, form, fileInput, status, queueBlock;

    $onMounted(async () => {
      const token = store.state.token;
      const server = store.state.server;

      if (!token) {
        $f7.views.main.router.navigate("/login");
        return;
      }

      form = document.getElementById("uploadForm");
      status = document.getElementById("statusBlock");
      queueBlock = document.getElementById("queueBlock");
      fileInput = document.getElementById("mediaInput");
      albumSelect = document.getElementById("albumSelect");

      console.log("[UploadPage] Mounted. Token present:", !!token);

      await loadAlbums(server, token);

      if (store.state.pendingUploads.length > 0) {
        status.innerText = "⏳ You have pending files.";
        form.caption.value = store.state.pendingCaption || "";
      }

      form.addEventListener("submit", async (e) => {
        e.preventDefault();

        const files = fileInput.files;
        if (!files.length) {
          status.innerText = "❌ No files selected.";
          return;
        }

        store.state.pendingUploads = [...files];
        store.state.pendingCaption = form.caption.value;
        const caption = form.caption.value;
        const albumId = albumSelect.value;
        console.log("[UploadPage] Starting upload of", files.length, "file(s)");

        const formData = new FormData();
        formData.append("caption", caption);
        formData.append("album_id", albumId || "");

        let uploaded = 0;

        for (const file of files) {
          console.log("[UploadPage] Appending file:", file.name);

          try {
            const exists = await localforage.getItem("uploaded_" + file.name);
            if (exists) {
              console.log(
                "[UploadPage] Skipping (already uploaded):",
                file.name
              );
              continue;
            }

            formData.set("files", file);

            const res = await fetch(`${server}/upload`, {
              method: "POST",
              headers: { Authorization: `Bearer ${token}` },
              body: formData,
            });

            console.log("[UploadPage] Upload response status:", res.status);
            if (!res.ok) throw new Error("Upload failed");

            await localforage.setItem("uploaded_" + file.name, true);
            uploaded++;
          } catch (err) {
            console.error("[UploadPage] Upload error:", err);
            status.innerText = `❌ Error uploading ${file.name}`;
          }
        }

        status.innerText = `✅ Uploaded ${uploaded} new file(s).`;
        store.state.pendingUploads = [];
        store.state.pendingCaption = "";
        form.reset();

        await updateQueueStatus(server, token);
        startQueuePolling(server, token);
      });

      startQueuePolling(server, token);
    });

    $onUnmounted(() => {
      if (pollInterval) clearInterval(pollInterval);
    });

    async function loadAlbums(server, token) {
      try {
        const res = await fetch(`${server}/albums`, {
          headers: { Authorization: `Bearer ${token}` },
        });
        if (!res.ok) throw new Error("Failed to fetch albums");

        const albums = await res.json();
        const select = document.getElementById("albumSelect");
        albums.forEach((album) => {
          const opt = document.createElement("option");
          opt.value = album.id;
          opt.innerText = `${album.name} (${album.media_count})`;
          select.appendChild(opt);
        });
      } catch (err) {
        console.warn("[UploadPage] Failed to load albums:", err);
      }
    }

    async function updateQueueStatus(server, token) {
      console.log("[UploadPage] Fetching queue status...");
      try {
        const res = await fetch(`${server}/queue/status`, {
          headers: { Authorization: `Bearer ${token}` },
        });
        if (res.ok) {
          const queue = await res.json();
          console.log("[UploadPage] Queue data:", queue);
          if (queue.length === 0) {
            queueBlock.innerText = "✅ No items in your queue.";
          } else {
            queueBlock.innerHTML =
              `<b>Your Upload Queue:</b><br>` +
              queue
                .map((item) => `• ${item.filename} (${item.status})`)
                .join("<br>");
          }
        }
      } catch {
        queueBlock.innerText = "⚠️ Couldn't fetch queue.";
      }
    }

    function startQueuePolling(server, token) {
      if (pollInterval) clearInterval(pollInterval);
      pollInterval = setInterval(() => updateQueueStatus(server, token), 5000);
      console.log("[UploadPage] Started queue polling.");
    }

    return $render;
  };
</script>

<style>
  @media (prefers-color-scheme: dark) {
    .album-select {
      background-color: #333;
      color: #fff;
    }
  }
  .album-select {
    border: 1px solid #ccc;
    padding: 5px;
  }
</style>
