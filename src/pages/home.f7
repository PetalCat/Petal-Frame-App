<template>
  <div class="page">
    <div class="page-content">
      <div class="block" id="statusBlock"></div>
      <!-- Media Gallery -->
      <div class="media-gallery block">
        <div id="mediaGrid" class="media-grid"></div>
      </div>
      <div id="scrollSentinel" style="height: 1px"></div>
    </div>
  </div>
</template>

<script>
  import store from "../js/store.js";
  import localforage from "localforage";

  export default (props, { $f7, $onMounted }) => {
    let page = 0;
    const PAGE_SIZE = 20;
    let loading = false;
    let hasMore = true;
    let observer = null;

    const isImage = (filename) => /\.(jpe?g|png|gif|webp|bmp)$/i.test(filename);
    const isVideo = (filename) => /\.(mp4|webm|mov|avi|mkv)$/i.test(filename);

    const loadFeed = async () => {
      if (loading || !hasMore) return;
      loading = true;

      const token = store.state.token;
      const server = store.state.server;
      const container = document.getElementById("mediaGrid");

      const res = await fetch(
        `${server}/feed?limit=${PAGE_SIZE}&offset=${page * PAGE_SIZE}`,
        { headers: { Authorization: `Bearer ${token}` } }
      );

      if (!res.ok) {
        console.error("Feed fetch failed");
        loading = false;
        return;
      }

      const chunk = await res.json();
      console.log("Loaded chunk:", chunk);
      if (chunk.length < PAGE_SIZE) hasMore = false;
      page++;

      const fragment = document.createDocumentFragment();

      for (const item of chunk) {
        const avatarId = `avatar-${item.username}-${item.filename}`;
        const mediaId = `media-${item.filename}`;
        const card = document.createElement("div");
        card.className = "media-card";

        const mediaTag = isVideo(item.filename)
          ? `<video id="${mediaId}" muted></video>`
          : `<img loading="lazy" id="${mediaId}" alt="${
              item.caption || ""
            }" />`;

        card.innerHTML = `
					<div class="media-header">
						<img class="avatar" id="${avatarId}" src="/default-pfp.svg" alt="${
          item.username
        }" />
						<strong>${item.username}</strong>
					</div>
					${mediaTag}
					<div class="meta">
						<p>${item.caption || ""}</p>
					</div>
				`;

        fragment.appendChild(card);
      }

      container.appendChild(fragment);

      chunk.forEach((item) => {
        const mediaId = `media-${item.filename}`;
        const media = document.getElementById(mediaId);
        const previewKey = `preview-${item.filename}`;
        const fullURL = `${server}/uploads/${item.filename}`;
        const previewURL = `${server}/uploads/${item.preview_filename}`;

        if (!media) return;

        // Show preview if available immediately
        localforage.getItem(previewKey).then((cachedBlob) => {
          if (cachedBlob && isImage(item.filename)) {
            media.src = URL.createObjectURL(cachedBlob);
          }

          // Always load full media (replaces preview)
          media.src = fullURL;
          if (media.tagName === "VIDEO") {
            media.controls = true;
          }
        });

        const card = document.getElementById(mediaId)?.closest(".media-card");
        if (card && media) {
          card.addEventListener("click", () => {
            if (media.tagName === "VIDEO" && !media.controls) {
              media.controls = true;
              media.play();
            }
          });
        }

        const avatarId = `avatar-${item.username}-${item.filename}`;
        if (item.avatar) {
          fetch(`${server}/avatar/${item.avatar}`, {
            headers: { Authorization: `Bearer ${token}` },
          })
            .then((res) => (res.ok ? res.blob() : null))
            .then((blob) => {
              const avatar = document.getElementById(avatarId);
              if (blob && avatar) avatar.src = URL.createObjectURL(blob);
            });
        }
      });

      observeBottom();
      loading = false;
    };

    const observeBottom = () => {
      if (observer) observer.disconnect();
      const sentinel = document.getElementById("scrollSentinel");
      if (!sentinel) return;
      observer = new IntersectionObserver((entries) => {
        if (entries[0].isIntersecting) loadFeed();
      });
      observer.observe(sentinel);
    };

    $onMounted(() => {
      if (!store.state.token) {
        $f7.views.main.router.navigate("/login");
        return;
      }
      loadFeed();
    });

    return $render;
  };
</script>

<style>
  .media-grid {
    display: flex;
    flex-direction: column;
    gap: 16px;
  }

  .media-card {
    background: #f4f4f8;
    border-radius: 14px;
    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
    padding: 1rem;
    overflow: hidden;
    max-width: 600px;
    margin: 0 auto;
  }
  .media-card img,
  .media-card video {
    width: 100%;
    border-radius: 12px;
    object-fit: cover;
  }
</style>
