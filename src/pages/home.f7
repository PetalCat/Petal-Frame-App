<template>
  <div class="page">
    <div class="page-content">
      <div class="block" id="statusBlock"></div>
      <!-- Media Gallery -->
      <div class="media-gallery block">
        <div id="mediaGrid" class="media-grid"></div>
      </div>
    </div>
  </div>
</template>

<script>
  import store from "../js/store.js";

  export default (props, { $f7, $onMounted }) => {
    $onMounted(() => {
      const token = store.state.token;
      const server = store.state.server;

      // If no token, redirect to login.
      if (!token) {
        $f7.views.main.router.navigate("/login");
        return;
      }

      const status = document.getElementById("statusBlock");
      const mediaGrid = document.getElementById("mediaGrid");

      // Use cached feed if available or default to empty array.
      const cachedFeed = Array.isArray(store.state.feed)
        ? store.state.feed
        : [];
      if (!Array.isArray(store.state.feed)) {
        console.warn(
          "Feed is undefined in the store; initializing to an empty array."
        );
        // You may need to ensure that your store's initial state already sets feed to []
        // or update it here.
        store.dispatch("setFeed", []);
      }

      // Function to render the media feed.
      const renderFeed = (feed) => {
        // Ensure feed is an array.
        if (!Array.isArray(feed)) {
          console.error("renderFeed: Expected an array but got:", feed);
          return;
        }
        mediaGrid.innerHTML = "";

        const isImage = (filename) =>
          /\.(jpe?g|png|gif|webp|bmp)$/i.test(filename);
        const isVideo = (filename) =>
          /\.(mp4|webm|mov|avi|mkv)$/i.test(filename);

        feed.forEach((item) => {
          const avatarId = `avatar-${item.username}-${item.filename}`;
          const card = document.createElement("div");
          card.className = "media-card";

          let mediaTag = "";
          if (isVideo(item.filename)) {
            mediaTag = `<video src="${server}/uploads/${item.filename}" controls muted></video>`;
          } else if (isImage(item.filename)) {
            mediaTag = `<img src="${server}/uploads/${item.filename}" alt="${
              item.caption || ""
            }" />`;
          } else {
            mediaTag = `<p>Unsupported file type</p>`;
          }

          card.innerHTML = `
			<div class="media-header">
				<img class="avatar" id="${avatarId}" src="/default-pfp.svg" alt="${
            item.username
          }" />
				<strong>${item.username}</strong>
			</div>
			${mediaTag}
			<div class="meta">
				<p>${item.caption || ""}</p>
			</div>
		`;
          mediaGrid.appendChild(card);

          if (item.avatar) {
            fetch(`${server}/avatar/${item.avatar}`, {
              headers: { Authorization: `Bearer ${token}` },
            })
              .then((res) => (res.ok ? res.blob() : null))
              .then((blob) => {
                if (blob) {
                  const img = document.getElementById(avatarId);
                  img.src = URL.createObjectURL(blob);
                }
              });
          }
        });
      };

      // Render the initial (cached or default empty) feed.
      renderFeed(cachedFeed);

      // Fetch fresh feed from the API.
      fetch(`${server}/feed`, {
        headers: { Authorization: `Bearer ${token}` },
      })
        .then((res) => {
          if (!res.ok) {
            // Throw an error if the network response is bad.
            throw new Error("Network response was not ok");
          }
          return res.json();
        })
        .then(async (feed) => {
          console.log("Fetched feed:", feed);
          // Validate that the fetched feed is an array.
          if (!Array.isArray(feed)) {
            console.error("Fetched feed is not an array, got:", feed);
            feed = [];
          }
          // Update the store with the fetched feed.
          try {
            await store.dispatch("setFeed", feed);
          } catch (dispatchError) {
            console.error("Error setting feed in store:", dispatchError);
          }
          // Render the fetched feed.
          renderFeed(feed);
        })
        .catch((error) => {
          console.error("Error fetching feed:", error);
        });
    });

    return $render;
  };
</script>

<style>
  .media-grid {
    display: flex;
    flex-direction: column;
    gap: 16px;
  }

  .media-card {
    background: #f4f4f8;
    border-radius: 14px;
    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
    padding: 1rem;
    overflow: hidden;
    max-width: 600px;
    margin: 0 auto;
  }
  .media-card img,
  .media-card video {
    width: 100%;
    border-radius: 12px;
    object-fit: cover;
  }
</style>
