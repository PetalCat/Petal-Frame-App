<template>
  <div id="app">
    <div class="view view-main view-init safe-areas">
      <div class="page-content"></div>
    </div>

    <!-- Bottom Nav (Mobile Only) -->
    <div id="bottomNav" class="bottom-tabbar">
      <div class="tab-link" data-page="home">
        <i class="icon f7-icons">house</i><span>Home</span>
      </div>
      <div class="tab-link" data-page="gallery">
        <i class="icon f7-icons">photo</i><span>Gallery</span>
      </div>
      <div class="tab-link" data-page="upload">
        <i class="icon f7-icons">arrow_up_circle</i><span>Upload</span>
      </div>
      <div
        class="tab-link"
        data-page="admin"
        id="adminTab"
        style="display: none"
      >
        <i class="icon f7-icons">gear</i><span>Admin</span>
      </div>
      <div class="tab-link" data-page="profile">
        <img id="bottomAvatar" src="/default-pfp.svg" alt="Profile" />
        <span>Profile</span>
      </div>
    </div>

    <!-- User Dropdown (Desktop Only) -->
    <div id="userDropdown" class="user-dropdown">
      <a href="/settings" class="dropdown-item">Settings</a>
      <button class="dropdown-item" style="color: red" id="logoutButton">
        Logout
      </button>
    </div>
  </div>
</template>

<script>
  import store from "./js/store.js";

  async function loadProtectedImage(url, token, imgElement) {
    try {
      if (url.startsWith("/")) {
        imgElement.src = url;
        return;
      }
      const res = await fetch(url, {
        headers: { Authorization: `Bearer ${token}` },
      });
      if (!res.ok) throw new Error("Failed to load avatar");
      const blob = await res.blob();
      imgElement.src = URL.createObjectURL(blob);
    } catch {
      imgElement.src = "/default-pfp.svg";
    }
  }

  export default (props, { $f7, $onMounted }) => {
    $onMounted(async () => {
      await store.dispatch("loadPersistedState");

      const token = store.state.token;
      const server = store.state.server;

      const redirectToLogin = () => {
        setTimeout(() => {
          if ($f7?.views?.main?.router) {
            $f7.views.main.router.navigate("/login");
          } else {
            window.location.href = "/login";
          }
        }, 0);
      };

      if (token) {
        try {
          const res = await fetch(`${server}/me`, {
            headers: { Authorization: `Bearer ${token}` },
          });
          if (!res.ok) throw new Error("Token invalid");
          const data = await res.json();
          store.dispatch("setAuth", { token, username: data.username });

          // 🔐 Show Admin tab if user is admin
          if (data.is_admin) {
            document.getElementById("adminTab").style.display = "flex";
          }

          const avatarUrl = data.avatar
            ? `${server}/avatar/${data.avatar}`
            : "/default-pfp.svg";
          loadProtectedImage(
            avatarUrl,
            token,
            document.getElementById("bottomAvatar")
          );
        } catch (err) {
          console.warn("Auth failed", err.message);
          store.dispatch("clearAuth");
          redirectToLogin();
          return;
        }
      } else {
        redirectToLogin();
        return;
      }

      document.addEventListener("click", (e) => {
        if (
          !e.target.closest("#userDropdown") &&
          !e.target.closest("#bottomAvatar")
        ) {
          document.getElementById("userDropdown").style.display = "none";
        }
      });

      document.getElementById("logoutButton")?.addEventListener("click", () => {
        store.dispatch("clearAuth");
        window.location.href = "/login";
      });

      document.querySelectorAll("#bottomNav .tab-link").forEach((el) => {
        el.addEventListener("click", () => {
          const page = el.dataset.page;
          const router = $f7?.views?.main?.router;

          if (!router || !page) return;

          let target;
          if (page === "home") {
            target = "/";
          } else if (page === "profile") {
            target = `/profile/${store.state.username}`;
          } else {
            target = `/${page}`;
          }

          router.navigate(target);
        });
      });

      // Long-press to show user dropdown
      const dropdown = document.getElementById("userDropdown");
      const avatarBtn = document.getElementById("bottomAvatar");
      let pressTimer;

      avatarBtn.addEventListener("mousedown", () => {
        pressTimer = setTimeout(() => {
          const rect = avatarBtn.getBoundingClientRect();
          dropdown.style.left = `${rect.left}px`;
          dropdown.style.top = `${rect.top - 80}px`;
          dropdown.style.display = "flex";
        }, 500);
      });
      avatarBtn.addEventListener("mouseup", () => clearTimeout(pressTimer));
      avatarBtn.addEventListener("mouseleave", () => clearTimeout(pressTimer));

      avatarBtn.addEventListener("touchstart", () => {
        pressTimer = setTimeout(() => {
          const rect = avatarBtn.getBoundingClientRect();
          dropdown.style.left = `${rect.left}px`;
          dropdown.style.top = `${rect.top - 80}px`;
          dropdown.style.display = "flex";
        }, 500);
      });
      avatarBtn.addEventListener("touchend", () => clearTimeout(pressTimer));
    });

    return $render;
  };
</script>

<style>
  .bottom-tabbar {
    position: fixed;
    bottom: 0;
    left: 0;
    width: 100%;
    background: rgba(255, 255, 255, 0.9);
    backdrop-filter: blur(10px);
    border-top: 1px solid #ccc;
    display: flex;
    justify-content: space-around;
    padding: 8px 0;
    z-index: 10000;
    box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.05);
  }

  .bottom-tabbar .tab-link {
    display: flex;
    flex-direction: column;
    align-items: center;
    font-size: 12px;
    color: #333;
    text-decoration: none;
  }

  .bottom-tabbar .icon {
    font-size: 22px;
    margin-bottom: 2px;
  }

  #bottomAvatar {
    width: 24px;
    height: 24px;
    border-radius: 50%;
    object-fit: cover;
    border: 1px solid #ccc;
    margin-bottom: 2px;
  }

  /* 🌒 Dark Mode */
  @media (prefers-color-scheme: dark) {
    .bottom-tabbar {
      background: rgba(16, 16, 16, 0.9);
      border-top: 1px solid #333;
      box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.3);
    }

    .bottom-tabbar .tab-link {
      color: #eee;
    }

    #bottomAvatar {
      border: 1px solid #555;
    }
  }

  .user-dropdown {
    position: fixed;
    display: none;
    flex-direction: column;
    background: white;
    border: 1px solid #ccc;
    border-radius: 6px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    z-index: 9999;
    min-width: 140px;
  }

  .user-dropdown .dropdown-item {
    padding: 10px 14px;
    text-align: left;
    background: none;
    border: none;
    cursor: pointer;
    color: #333;
    font-size: 0.9rem;
    width: 100%;
  }

  .user-dropdown .dropdown-item:hover {
    background-color: #f2f2f2;
  }
</style>
